/*
 * YaMDb API
 * запросы к API начинаются с `/api/v1/`  # Описание Проект **YaMDb** собирает отзывы пользователей на произведения. Произведения делятся на категории: «Книги», «Фильмы», «Музыка».  # Алгоритм регистрации пользователей 1. Пользователь отправляет запрос с параметром `email` на `/auth/email/`. 2. **YaMDB** отправляет письмо с кодом подтверждения (`confirmation_code`) на адрес  `email` . 3. Пользователь отправляет запрос с параметрами `email` и `confirmation_code` на `/auth/token/`, в ответе на запрос ему приходит `token` (JWT-токен). 4. При желании пользователь отправляет PATCH-запрос на `/users/me/` и заполняет поля в своём профайле (описание полей — в документации).  # Пользовательские роли - **Аноним** — может просматривать описания произведений, читать отзывы и комментарии. - **Аутентифицированный пользователь** — может, как и **Аноним**, читать всё, дополнительно он может публиковать отзывы и ставить рейтинг произведениям (фильмам/книгам/песенкам), может комментировать чужие отзывы и ставить им оценки; может редактировать и удалять **свои** отзывы и комментарии. - **Модератор** — те же права, что и у **Аутентифицированного пользователя** плюс право удалять **любые** отзывы и комментарии. - **Администратор** — полные права на управление проектом и всем его содержимым. Может создавать и удалять категории и произведения. Может назначать роли пользователям. - **Администратор Django** — те же права, что и у роли **Администратор**. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Comment;
import org.openapitools.client.model.InlineResponse2001;
import org.openapitools.client.model.ValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CommentsApi {
    private ApiClient localVarApiClient;

    public CommentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CommentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for titlesTitleIdReviewsReviewIdCommentsCommentIdDelete
     * @param titleId ID объекта для оценки (required)
     * @param reviewId ID отзыва (required)
     * @param commentId ID комментария (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Необходим JWT токен </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Нет прав доступа </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки, отзыв или комментарий </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call titlesTitleIdReviewsReviewIdCommentsCommentIdDeleteCall(BigDecimal titleId, BigDecimal reviewId, BigDecimal commentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/titles/{title_id}/reviews/{review_id}/comments/{comment_id}/"
            .replaceAll("\\{" + "title_id" + "\\}", localVarApiClient.escapeString(titleId.toString()))
            .replaceAll("\\{" + "review_id" + "\\}", localVarApiClient.escapeString(reviewId.toString()))
            .replaceAll("\\{" + "comment_id" + "\\}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "jwt_auth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call titlesTitleIdReviewsReviewIdCommentsCommentIdDeleteValidateBeforeCall(BigDecimal titleId, BigDecimal reviewId, BigDecimal commentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'titleId' is set
        if (titleId == null) {
            throw new ApiException("Missing the required parameter 'titleId' when calling titlesTitleIdReviewsReviewIdCommentsCommentIdDelete(Async)");
        }
        
        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling titlesTitleIdReviewsReviewIdCommentsCommentIdDelete(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling titlesTitleIdReviewsReviewIdCommentsCommentIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = titlesTitleIdReviewsReviewIdCommentsCommentIdDeleteCall(titleId, reviewId, commentId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Удалить комментарий к отзыву по id.  Права доступа: **Автор комментария, модератор или администратор**. 
     * @param titleId ID объекта для оценки (required)
     * @param reviewId ID отзыва (required)
     * @param commentId ID комментария (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Необходим JWT токен </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Нет прав доступа </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки, отзыв или комментарий </td><td>  -  </td></tr>
     </table>
     */
    public void titlesTitleIdReviewsReviewIdCommentsCommentIdDelete(BigDecimal titleId, BigDecimal reviewId, BigDecimal commentId) throws ApiException {
        titlesTitleIdReviewsReviewIdCommentsCommentIdDeleteWithHttpInfo(titleId, reviewId, commentId);
    }

    /**
     * 
     * Удалить комментарий к отзыву по id.  Права доступа: **Автор комментария, модератор или администратор**. 
     * @param titleId ID объекта для оценки (required)
     * @param reviewId ID отзыва (required)
     * @param commentId ID комментария (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Необходим JWT токен </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Нет прав доступа </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки, отзыв или комментарий </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> titlesTitleIdReviewsReviewIdCommentsCommentIdDeleteWithHttpInfo(BigDecimal titleId, BigDecimal reviewId, BigDecimal commentId) throws ApiException {
        okhttp3.Call localVarCall = titlesTitleIdReviewsReviewIdCommentsCommentIdDeleteValidateBeforeCall(titleId, reviewId, commentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Удалить комментарий к отзыву по id.  Права доступа: **Автор комментария, модератор или администратор**. 
     * @param titleId ID объекта для оценки (required)
     * @param reviewId ID отзыва (required)
     * @param commentId ID комментария (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Необходим JWT токен </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Нет прав доступа </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки, отзыв или комментарий </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call titlesTitleIdReviewsReviewIdCommentsCommentIdDeleteAsync(BigDecimal titleId, BigDecimal reviewId, BigDecimal commentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = titlesTitleIdReviewsReviewIdCommentsCommentIdDeleteValidateBeforeCall(titleId, reviewId, commentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for titlesTitleIdReviewsReviewIdCommentsCommentIdGet
     * @param titleId ID объекта для оценки (required)
     * @param reviewId ID отзыва (required)
     * @param commentId ID комментария (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки, отзыв или комментарий </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call titlesTitleIdReviewsReviewIdCommentsCommentIdGetCall(BigDecimal titleId, BigDecimal reviewId, BigDecimal commentId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/titles/{title_id}/reviews/{review_id}/comments/{comment_id}/"
            .replaceAll("\\{" + "title_id" + "\\}", localVarApiClient.escapeString(titleId.toString()))
            .replaceAll("\\{" + "review_id" + "\\}", localVarApiClient.escapeString(reviewId.toString()))
            .replaceAll("\\{" + "comment_id" + "\\}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call titlesTitleIdReviewsReviewIdCommentsCommentIdGetValidateBeforeCall(BigDecimal titleId, BigDecimal reviewId, BigDecimal commentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'titleId' is set
        if (titleId == null) {
            throw new ApiException("Missing the required parameter 'titleId' when calling titlesTitleIdReviewsReviewIdCommentsCommentIdGet(Async)");
        }
        
        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling titlesTitleIdReviewsReviewIdCommentsCommentIdGet(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling titlesTitleIdReviewsReviewIdCommentsCommentIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = titlesTitleIdReviewsReviewIdCommentsCommentIdGetCall(titleId, reviewId, commentId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Получить комментарий для отзыва по id.  Права доступа: **Доступно без токена.** 
     * @param titleId ID объекта для оценки (required)
     * @param reviewId ID отзыва (required)
     * @param commentId ID комментария (required)
     * @return Comment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки, отзыв или комментарий </td><td>  -  </td></tr>
     </table>
     */
    public Comment titlesTitleIdReviewsReviewIdCommentsCommentIdGet(BigDecimal titleId, BigDecimal reviewId, BigDecimal commentId) throws ApiException {
        ApiResponse<Comment> localVarResp = titlesTitleIdReviewsReviewIdCommentsCommentIdGetWithHttpInfo(titleId, reviewId, commentId);
        return localVarResp.getData();
    }

    /**
     * 
     * Получить комментарий для отзыва по id.  Права доступа: **Доступно без токена.** 
     * @param titleId ID объекта для оценки (required)
     * @param reviewId ID отзыва (required)
     * @param commentId ID комментария (required)
     * @return ApiResponse&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки, отзыв или комментарий </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Comment> titlesTitleIdReviewsReviewIdCommentsCommentIdGetWithHttpInfo(BigDecimal titleId, BigDecimal reviewId, BigDecimal commentId) throws ApiException {
        okhttp3.Call localVarCall = titlesTitleIdReviewsReviewIdCommentsCommentIdGetValidateBeforeCall(titleId, reviewId, commentId, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Получить комментарий для отзыва по id.  Права доступа: **Доступно без токена.** 
     * @param titleId ID объекта для оценки (required)
     * @param reviewId ID отзыва (required)
     * @param commentId ID комментария (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки, отзыв или комментарий </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call titlesTitleIdReviewsReviewIdCommentsCommentIdGetAsync(BigDecimal titleId, BigDecimal reviewId, BigDecimal commentId, final ApiCallback<Comment> _callback) throws ApiException {

        okhttp3.Call localVarCall = titlesTitleIdReviewsReviewIdCommentsCommentIdGetValidateBeforeCall(titleId, reviewId, commentId, _callback);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for titlesTitleIdReviewsReviewIdCommentsCommentIdPatch
     * @param titleId ID объекта для оценки (required)
     * @param reviewId ID отзыва (required)
     * @param commentId ID комментария (required)
     * @param comment  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Необходим JWT токен </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Нет прав доступа </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки, отзыв или комментарий </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call titlesTitleIdReviewsReviewIdCommentsCommentIdPatchCall(BigDecimal titleId, BigDecimal reviewId, BigDecimal commentId, Comment comment, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = comment;

        // create path and map variables
        String localVarPath = "/titles/{title_id}/reviews/{review_id}/comments/{comment_id}/"
            .replaceAll("\\{" + "title_id" + "\\}", localVarApiClient.escapeString(titleId.toString()))
            .replaceAll("\\{" + "review_id" + "\\}", localVarApiClient.escapeString(reviewId.toString()))
            .replaceAll("\\{" + "comment_id" + "\\}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "jwt_auth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call titlesTitleIdReviewsReviewIdCommentsCommentIdPatchValidateBeforeCall(BigDecimal titleId, BigDecimal reviewId, BigDecimal commentId, Comment comment, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'titleId' is set
        if (titleId == null) {
            throw new ApiException("Missing the required parameter 'titleId' when calling titlesTitleIdReviewsReviewIdCommentsCommentIdPatch(Async)");
        }
        
        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling titlesTitleIdReviewsReviewIdCommentsCommentIdPatch(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling titlesTitleIdReviewsReviewIdCommentsCommentIdPatch(Async)");
        }
        

        okhttp3.Call localVarCall = titlesTitleIdReviewsReviewIdCommentsCommentIdPatchCall(titleId, reviewId, commentId, comment, _callback);
        return localVarCall;

    }

    /**
     * 
     * Частично обновить комментарий к отзыву по id.  Права доступа: **Автор комментария, модератор или администратор**. 
     * @param titleId ID объекта для оценки (required)
     * @param reviewId ID отзыва (required)
     * @param commentId ID комментария (required)
     * @param comment  (optional)
     * @return Comment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Необходим JWT токен </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Нет прав доступа </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки, отзыв или комментарий </td><td>  -  </td></tr>
     </table>
     */
    public Comment titlesTitleIdReviewsReviewIdCommentsCommentIdPatch(BigDecimal titleId, BigDecimal reviewId, BigDecimal commentId, Comment comment) throws ApiException {
        ApiResponse<Comment> localVarResp = titlesTitleIdReviewsReviewIdCommentsCommentIdPatchWithHttpInfo(titleId, reviewId, commentId, comment);
        return localVarResp.getData();
    }

    /**
     * 
     * Частично обновить комментарий к отзыву по id.  Права доступа: **Автор комментария, модератор или администратор**. 
     * @param titleId ID объекта для оценки (required)
     * @param reviewId ID отзыва (required)
     * @param commentId ID комментария (required)
     * @param comment  (optional)
     * @return ApiResponse&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Необходим JWT токен </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Нет прав доступа </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки, отзыв или комментарий </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Comment> titlesTitleIdReviewsReviewIdCommentsCommentIdPatchWithHttpInfo(BigDecimal titleId, BigDecimal reviewId, BigDecimal commentId, Comment comment) throws ApiException {
        okhttp3.Call localVarCall = titlesTitleIdReviewsReviewIdCommentsCommentIdPatchValidateBeforeCall(titleId, reviewId, commentId, comment, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Частично обновить комментарий к отзыву по id.  Права доступа: **Автор комментария, модератор или администратор**. 
     * @param titleId ID объекта для оценки (required)
     * @param reviewId ID отзыва (required)
     * @param commentId ID комментария (required)
     * @param comment  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Необходим JWT токен </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Нет прав доступа </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки, отзыв или комментарий </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call titlesTitleIdReviewsReviewIdCommentsCommentIdPatchAsync(BigDecimal titleId, BigDecimal reviewId, BigDecimal commentId, Comment comment, final ApiCallback<Comment> _callback) throws ApiException {

        okhttp3.Call localVarCall = titlesTitleIdReviewsReviewIdCommentsCommentIdPatchValidateBeforeCall(titleId, reviewId, commentId, comment, _callback);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for titlesTitleIdReviewsReviewIdCommentsGet
     * @param titleId ID объекта для оценки (required)
     * @param reviewId ID отзыва (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список комментариев с пагинацией </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки или отзыв </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call titlesTitleIdReviewsReviewIdCommentsGetCall(BigDecimal titleId, BigDecimal reviewId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/titles/{title_id}/reviews/{review_id}/comments/"
            .replaceAll("\\{" + "title_id" + "\\}", localVarApiClient.escapeString(titleId.toString()))
            .replaceAll("\\{" + "review_id" + "\\}", localVarApiClient.escapeString(reviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call titlesTitleIdReviewsReviewIdCommentsGetValidateBeforeCall(BigDecimal titleId, BigDecimal reviewId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'titleId' is set
        if (titleId == null) {
            throw new ApiException("Missing the required parameter 'titleId' when calling titlesTitleIdReviewsReviewIdCommentsGet(Async)");
        }
        
        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling titlesTitleIdReviewsReviewIdCommentsGet(Async)");
        }
        

        okhttp3.Call localVarCall = titlesTitleIdReviewsReviewIdCommentsGetCall(titleId, reviewId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Получить список всех комментариев к отзыву по id  Права доступа: **Доступно без токена.** 
     * @param titleId ID объекта для оценки (required)
     * @param reviewId ID отзыва (required)
     * @return List&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список комментариев с пагинацией </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки или отзыв </td><td>  -  </td></tr>
     </table>
     */
    public List<InlineResponse2001> titlesTitleIdReviewsReviewIdCommentsGet(BigDecimal titleId, BigDecimal reviewId) throws ApiException {
        ApiResponse<List<InlineResponse2001>> localVarResp = titlesTitleIdReviewsReviewIdCommentsGetWithHttpInfo(titleId, reviewId);
        return localVarResp.getData();
    }

    /**
     * 
     * Получить список всех комментариев к отзыву по id  Права доступа: **Доступно без токена.** 
     * @param titleId ID объекта для оценки (required)
     * @param reviewId ID отзыва (required)
     * @return ApiResponse&lt;List&lt;InlineResponse2001&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список комментариев с пагинацией </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки или отзыв </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InlineResponse2001>> titlesTitleIdReviewsReviewIdCommentsGetWithHttpInfo(BigDecimal titleId, BigDecimal reviewId) throws ApiException {
        okhttp3.Call localVarCall = titlesTitleIdReviewsReviewIdCommentsGetValidateBeforeCall(titleId, reviewId, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse2001>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Получить список всех комментариев к отзыву по id  Права доступа: **Доступно без токена.** 
     * @param titleId ID объекта для оценки (required)
     * @param reviewId ID отзыва (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список комментариев с пагинацией </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки или отзыв </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call titlesTitleIdReviewsReviewIdCommentsGetAsync(BigDecimal titleId, BigDecimal reviewId, final ApiCallback<List<InlineResponse2001>> _callback) throws ApiException {

        okhttp3.Call localVarCall = titlesTitleIdReviewsReviewIdCommentsGetValidateBeforeCall(titleId, reviewId, _callback);
        Type localVarReturnType = new TypeToken<List<InlineResponse2001>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for titlesTitleIdReviewsReviewIdCommentsPost
     * @param titleId ID объекта для оценки (required)
     * @param reviewId ID отзыва (required)
     * @param comment  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Необходим JWT токен </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки или отзыв </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call titlesTitleIdReviewsReviewIdCommentsPostCall(BigDecimal titleId, BigDecimal reviewId, Comment comment, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = comment;

        // create path and map variables
        String localVarPath = "/titles/{title_id}/reviews/{review_id}/comments/"
            .replaceAll("\\{" + "title_id" + "\\}", localVarApiClient.escapeString(titleId.toString()))
            .replaceAll("\\{" + "review_id" + "\\}", localVarApiClient.escapeString(reviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "jwt_auth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call titlesTitleIdReviewsReviewIdCommentsPostValidateBeforeCall(BigDecimal titleId, BigDecimal reviewId, Comment comment, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'titleId' is set
        if (titleId == null) {
            throw new ApiException("Missing the required parameter 'titleId' when calling titlesTitleIdReviewsReviewIdCommentsPost(Async)");
        }
        
        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling titlesTitleIdReviewsReviewIdCommentsPost(Async)");
        }
        

        okhttp3.Call localVarCall = titlesTitleIdReviewsReviewIdCommentsPostCall(titleId, reviewId, comment, _callback);
        return localVarCall;

    }

    /**
     * 
     * Создать новый комментарий для отзыва.  Права доступа: **Аутентифицированные пользователи.** 
     * @param titleId ID объекта для оценки (required)
     * @param reviewId ID отзыва (required)
     * @param comment  (optional)
     * @return Comment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Необходим JWT токен </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки или отзыв </td><td>  -  </td></tr>
     </table>
     */
    public Comment titlesTitleIdReviewsReviewIdCommentsPost(BigDecimal titleId, BigDecimal reviewId, Comment comment) throws ApiException {
        ApiResponse<Comment> localVarResp = titlesTitleIdReviewsReviewIdCommentsPostWithHttpInfo(titleId, reviewId, comment);
        return localVarResp.getData();
    }

    /**
     * 
     * Создать новый комментарий для отзыва.  Права доступа: **Аутентифицированные пользователи.** 
     * @param titleId ID объекта для оценки (required)
     * @param reviewId ID отзыва (required)
     * @param comment  (optional)
     * @return ApiResponse&lt;Comment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Необходим JWT токен </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки или отзыв </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Comment> titlesTitleIdReviewsReviewIdCommentsPostWithHttpInfo(BigDecimal titleId, BigDecimal reviewId, Comment comment) throws ApiException {
        okhttp3.Call localVarCall = titlesTitleIdReviewsReviewIdCommentsPostValidateBeforeCall(titleId, reviewId, comment, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Создать новый комментарий для отзыва.  Права доступа: **Аутентифицированные пользователи.** 
     * @param titleId ID объекта для оценки (required)
     * @param reviewId ID отзыва (required)
     * @param comment  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Необходим JWT токен </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки или отзыв </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call titlesTitleIdReviewsReviewIdCommentsPostAsync(BigDecimal titleId, BigDecimal reviewId, Comment comment, final ApiCallback<Comment> _callback) throws ApiException {

        okhttp3.Call localVarCall = titlesTitleIdReviewsReviewIdCommentsPostValidateBeforeCall(titleId, reviewId, comment, _callback);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
