/*
 * YaMDb API
 * запросы к API начинаются с `/api/v1/`  # Описание Проект **YaMDb** собирает отзывы пользователей на произведения. Произведения делятся на категории: «Книги», «Фильмы», «Музыка».  # Алгоритм регистрации пользователей 1. Пользователь отправляет запрос с параметром `email` на `/auth/email/`. 2. **YaMDB** отправляет письмо с кодом подтверждения (`confirmation_code`) на адрес  `email` . 3. Пользователь отправляет запрос с параметрами `email` и `confirmation_code` на `/auth/token/`, в ответе на запрос ему приходит `token` (JWT-токен). 4. При желании пользователь отправляет PATCH-запрос на `/users/me/` и заполняет поля в своём профайле (описание полей — в документации).  # Пользовательские роли - **Аноним** — может просматривать описания произведений, читать отзывы и комментарии. - **Аутентифицированный пользователь** — может, как и **Аноним**, читать всё, дополнительно он может публиковать отзывы и ставить рейтинг произведениям (фильмам/книгам/песенкам), может комментировать чужие отзывы и ставить им оценки; может редактировать и удалять **свои** отзывы и комментарии. - **Модератор** — те же права, что и у **Аутентифицированного пользователя** плюс право удалять **любые** отзывы и комментарии. - **Администратор** — полные права на управление проектом и всем его содержимым. Может создавать и удалять категории и произведения. Может назначать роли пользователям. - **Администратор Django** — те же права, что и у роли **Администратор**. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.InlineResponse200;
import org.openapitools.client.model.Review;
import org.openapitools.client.model.ValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReviewsApi {
    private ApiClient localVarApiClient;

    public ReviewsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReviewsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for titlesTitleIdReviewsGet
     * @param titleId ID объекта для оценки (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список отзывов с пагинацией </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call titlesTitleIdReviewsGetCall(BigDecimal titleId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/titles/{title_id}/reviews/"
            .replaceAll("\\{" + "title_id" + "\\}", localVarApiClient.escapeString(titleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call titlesTitleIdReviewsGetValidateBeforeCall(BigDecimal titleId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'titleId' is set
        if (titleId == null) {
            throw new ApiException("Missing the required parameter 'titleId' when calling titlesTitleIdReviewsGet(Async)");
        }
        

        okhttp3.Call localVarCall = titlesTitleIdReviewsGetCall(titleId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Получить список всех отзывов.  Права доступа: **Доступно без токена.** 
     * @param titleId ID объекта для оценки (required)
     * @return List&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список отзывов с пагинацией </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки </td><td>  -  </td></tr>
     </table>
     */
    public List<InlineResponse200> titlesTitleIdReviewsGet(BigDecimal titleId) throws ApiException {
        ApiResponse<List<InlineResponse200>> localVarResp = titlesTitleIdReviewsGetWithHttpInfo(titleId);
        return localVarResp.getData();
    }

    /**
     * 
     * Получить список всех отзывов.  Права доступа: **Доступно без токена.** 
     * @param titleId ID объекта для оценки (required)
     * @return ApiResponse&lt;List&lt;InlineResponse200&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список отзывов с пагинацией </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InlineResponse200>> titlesTitleIdReviewsGetWithHttpInfo(BigDecimal titleId) throws ApiException {
        okhttp3.Call localVarCall = titlesTitleIdReviewsGetValidateBeforeCall(titleId, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse200>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Получить список всех отзывов.  Права доступа: **Доступно без токена.** 
     * @param titleId ID объекта для оценки (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список отзывов с пагинацией </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call titlesTitleIdReviewsGetAsync(BigDecimal titleId, final ApiCallback<List<InlineResponse200>> _callback) throws ApiException {

        okhttp3.Call localVarCall = titlesTitleIdReviewsGetValidateBeforeCall(titleId, _callback);
        Type localVarReturnType = new TypeToken<List<InlineResponse200>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for titlesTitleIdReviewsPost
     * @param titleId ID объекта для оценки (required)
     * @param review  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Новый отзыв </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Необходим JWT токен </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call titlesTitleIdReviewsPostCall(BigDecimal titleId, Review review, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = review;

        // create path and map variables
        String localVarPath = "/titles/{title_id}/reviews/"
            .replaceAll("\\{" + "title_id" + "\\}", localVarApiClient.escapeString(titleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "jwt_auth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call titlesTitleIdReviewsPostValidateBeforeCall(BigDecimal titleId, Review review, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'titleId' is set
        if (titleId == null) {
            throw new ApiException("Missing the required parameter 'titleId' when calling titlesTitleIdReviewsPost(Async)");
        }
        

        okhttp3.Call localVarCall = titlesTitleIdReviewsPostCall(titleId, review, _callback);
        return localVarCall;

    }

    /**
     * 
     * Создать новый отзыв. Пользователь может оставить только один отзыв на один объект.  Права доступа: **Аутентифицированные пользователи.** 
     * @param titleId ID объекта для оценки (required)
     * @param review  (optional)
     * @return Review
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Новый отзыв </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Необходим JWT токен </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки </td><td>  -  </td></tr>
     </table>
     */
    public Review titlesTitleIdReviewsPost(BigDecimal titleId, Review review) throws ApiException {
        ApiResponse<Review> localVarResp = titlesTitleIdReviewsPostWithHttpInfo(titleId, review);
        return localVarResp.getData();
    }

    /**
     * 
     * Создать новый отзыв. Пользователь может оставить только один отзыв на один объект.  Права доступа: **Аутентифицированные пользователи.** 
     * @param titleId ID объекта для оценки (required)
     * @param review  (optional)
     * @return ApiResponse&lt;Review&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Новый отзыв </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Необходим JWT токен </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Review> titlesTitleIdReviewsPostWithHttpInfo(BigDecimal titleId, Review review) throws ApiException {
        okhttp3.Call localVarCall = titlesTitleIdReviewsPostValidateBeforeCall(titleId, review, null);
        Type localVarReturnType = new TypeToken<Review>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Создать новый отзыв. Пользователь может оставить только один отзыв на один объект.  Права доступа: **Аутентифицированные пользователи.** 
     * @param titleId ID объекта для оценки (required)
     * @param review  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Новый отзыв </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Необходим JWT токен </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call titlesTitleIdReviewsPostAsync(BigDecimal titleId, Review review, final ApiCallback<Review> _callback) throws ApiException {

        okhttp3.Call localVarCall = titlesTitleIdReviewsPostValidateBeforeCall(titleId, review, _callback);
        Type localVarReturnType = new TypeToken<Review>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for titlesTitleIdReviewsReviewIdDelete
     * @param titleId ID объекта для оценки (required)
     * @param reviewId ID отзыва (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Необходим JWT токен </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Нет прав доступа </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call titlesTitleIdReviewsReviewIdDeleteCall(BigDecimal titleId, BigDecimal reviewId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/titles/{title_id}/reviews/{review_id}/"
            .replaceAll("\\{" + "title_id" + "\\}", localVarApiClient.escapeString(titleId.toString()))
            .replaceAll("\\{" + "review_id" + "\\}", localVarApiClient.escapeString(reviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "jwt_auth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call titlesTitleIdReviewsReviewIdDeleteValidateBeforeCall(BigDecimal titleId, BigDecimal reviewId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'titleId' is set
        if (titleId == null) {
            throw new ApiException("Missing the required parameter 'titleId' when calling titlesTitleIdReviewsReviewIdDelete(Async)");
        }
        
        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling titlesTitleIdReviewsReviewIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = titlesTitleIdReviewsReviewIdDeleteCall(titleId, reviewId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Удалить отзыв по id  Права доступа: **Автор отзыва, модератор или администратор.** 
     * @param titleId ID объекта для оценки (required)
     * @param reviewId ID отзыва (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Необходим JWT токен </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Нет прав доступа </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки </td><td>  -  </td></tr>
     </table>
     */
    public void titlesTitleIdReviewsReviewIdDelete(BigDecimal titleId, BigDecimal reviewId) throws ApiException {
        titlesTitleIdReviewsReviewIdDeleteWithHttpInfo(titleId, reviewId);
    }

    /**
     * 
     * Удалить отзыв по id  Права доступа: **Автор отзыва, модератор или администратор.** 
     * @param titleId ID объекта для оценки (required)
     * @param reviewId ID отзыва (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Необходим JWT токен </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Нет прав доступа </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> titlesTitleIdReviewsReviewIdDeleteWithHttpInfo(BigDecimal titleId, BigDecimal reviewId) throws ApiException {
        okhttp3.Call localVarCall = titlesTitleIdReviewsReviewIdDeleteValidateBeforeCall(titleId, reviewId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Удалить отзыв по id  Права доступа: **Автор отзыва, модератор или администратор.** 
     * @param titleId ID объекта для оценки (required)
     * @param reviewId ID отзыва (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Необходим JWT токен </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Нет прав доступа </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call titlesTitleIdReviewsReviewIdDeleteAsync(BigDecimal titleId, BigDecimal reviewId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = titlesTitleIdReviewsReviewIdDeleteValidateBeforeCall(titleId, reviewId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for titlesTitleIdReviewsReviewIdGet
     * @param titleId ID объекта для оценки (required)
     * @param reviewId ID отзыва (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Отзыв </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call titlesTitleIdReviewsReviewIdGetCall(BigDecimal titleId, BigDecimal reviewId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/titles/{title_id}/reviews/{review_id}/"
            .replaceAll("\\{" + "title_id" + "\\}", localVarApiClient.escapeString(titleId.toString()))
            .replaceAll("\\{" + "review_id" + "\\}", localVarApiClient.escapeString(reviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call titlesTitleIdReviewsReviewIdGetValidateBeforeCall(BigDecimal titleId, BigDecimal reviewId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'titleId' is set
        if (titleId == null) {
            throw new ApiException("Missing the required parameter 'titleId' when calling titlesTitleIdReviewsReviewIdGet(Async)");
        }
        
        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling titlesTitleIdReviewsReviewIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = titlesTitleIdReviewsReviewIdGetCall(titleId, reviewId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Получить отзыв по id.  Права доступа: **Доступно без токена.** 
     * @param titleId ID объекта для оценки (required)
     * @param reviewId ID отзыва (required)
     * @return Review
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Отзыв </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки </td><td>  -  </td></tr>
     </table>
     */
    public Review titlesTitleIdReviewsReviewIdGet(BigDecimal titleId, BigDecimal reviewId) throws ApiException {
        ApiResponse<Review> localVarResp = titlesTitleIdReviewsReviewIdGetWithHttpInfo(titleId, reviewId);
        return localVarResp.getData();
    }

    /**
     * 
     * Получить отзыв по id.  Права доступа: **Доступно без токена.** 
     * @param titleId ID объекта для оценки (required)
     * @param reviewId ID отзыва (required)
     * @return ApiResponse&lt;Review&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Отзыв </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Review> titlesTitleIdReviewsReviewIdGetWithHttpInfo(BigDecimal titleId, BigDecimal reviewId) throws ApiException {
        okhttp3.Call localVarCall = titlesTitleIdReviewsReviewIdGetValidateBeforeCall(titleId, reviewId, null);
        Type localVarReturnType = new TypeToken<Review>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Получить отзыв по id.  Права доступа: **Доступно без токена.** 
     * @param titleId ID объекта для оценки (required)
     * @param reviewId ID отзыва (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Отзыв </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call titlesTitleIdReviewsReviewIdGetAsync(BigDecimal titleId, BigDecimal reviewId, final ApiCallback<Review> _callback) throws ApiException {

        okhttp3.Call localVarCall = titlesTitleIdReviewsReviewIdGetValidateBeforeCall(titleId, reviewId, _callback);
        Type localVarReturnType = new TypeToken<Review>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for titlesTitleIdReviewsReviewIdPatch
     * @param titleId ID объекта для оценки (required)
     * @param reviewId ID отзыва (required)
     * @param review  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Отзыв </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Необходим JWT токен </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Нет прав доступа </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call titlesTitleIdReviewsReviewIdPatchCall(BigDecimal titleId, BigDecimal reviewId, Review review, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = review;

        // create path and map variables
        String localVarPath = "/titles/{title_id}/reviews/{review_id}/"
            .replaceAll("\\{" + "title_id" + "\\}", localVarApiClient.escapeString(titleId.toString()))
            .replaceAll("\\{" + "review_id" + "\\}", localVarApiClient.escapeString(reviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "jwt_auth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call titlesTitleIdReviewsReviewIdPatchValidateBeforeCall(BigDecimal titleId, BigDecimal reviewId, Review review, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'titleId' is set
        if (titleId == null) {
            throw new ApiException("Missing the required parameter 'titleId' when calling titlesTitleIdReviewsReviewIdPatch(Async)");
        }
        
        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling titlesTitleIdReviewsReviewIdPatch(Async)");
        }
        

        okhttp3.Call localVarCall = titlesTitleIdReviewsReviewIdPatchCall(titleId, reviewId, review, _callback);
        return localVarCall;

    }

    /**
     * 
     * Частично обновить отзыв по id.  Права доступа: **Автор отзыва, модератор или администратор.** 
     * @param titleId ID объекта для оценки (required)
     * @param reviewId ID отзыва (required)
     * @param review  (optional)
     * @return Review
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Отзыв </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Необходим JWT токен </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Нет прав доступа </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки </td><td>  -  </td></tr>
     </table>
     */
    public Review titlesTitleIdReviewsReviewIdPatch(BigDecimal titleId, BigDecimal reviewId, Review review) throws ApiException {
        ApiResponse<Review> localVarResp = titlesTitleIdReviewsReviewIdPatchWithHttpInfo(titleId, reviewId, review);
        return localVarResp.getData();
    }

    /**
     * 
     * Частично обновить отзыв по id.  Права доступа: **Автор отзыва, модератор или администратор.** 
     * @param titleId ID объекта для оценки (required)
     * @param reviewId ID отзыва (required)
     * @param review  (optional)
     * @return ApiResponse&lt;Review&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Отзыв </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Необходим JWT токен </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Нет прав доступа </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Review> titlesTitleIdReviewsReviewIdPatchWithHttpInfo(BigDecimal titleId, BigDecimal reviewId, Review review) throws ApiException {
        okhttp3.Call localVarCall = titlesTitleIdReviewsReviewIdPatchValidateBeforeCall(titleId, reviewId, review, null);
        Type localVarReturnType = new TypeToken<Review>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Частично обновить отзыв по id.  Права доступа: **Автор отзыва, модератор или администратор.** 
     * @param titleId ID объекта для оценки (required)
     * @param reviewId ID отзыва (required)
     * @param review  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Отзыв </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Необходим JWT токен </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Нет прав доступа </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Не найден объект оценки </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call titlesTitleIdReviewsReviewIdPatchAsync(BigDecimal titleId, BigDecimal reviewId, Review review, final ApiCallback<Review> _callback) throws ApiException {

        okhttp3.Call localVarCall = titlesTitleIdReviewsReviewIdPatchValidateBeforeCall(titleId, reviewId, review, _callback);
        Type localVarReturnType = new TypeToken<Review>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
